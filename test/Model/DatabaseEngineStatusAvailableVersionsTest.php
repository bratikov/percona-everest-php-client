<?php
/**
 * DatabaseEngineStatusAvailableVersionsTest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Everest
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Percona Everest schema
 *
 * # Authentication All requests to Everest API require `Authorization: Bearer <token>` header with a valid token in plain-text.  The token can be obtained by using `everestctl token reset` which resets the token and prints it to the screen.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the model.
 */

namespace Everest\Test\Model;

use PHPUnit\Framework\TestCase;

/**
 * DatabaseEngineStatusAvailableVersionsTest Class Doc Comment
 *
 * @category    Class
 * @description Versions struct represents available versions of database engine components.
 * @package     Everest
 * @author      OpenAPI Generator team
 * @link        https://openapi-generator.tech
 */
class DatabaseEngineStatusAvailableVersionsTest extends TestCase
{

    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test "DatabaseEngineStatusAvailableVersions"
     */
    public function testDatabaseEngineStatusAvailableVersions()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "backup"
     */
    public function testPropertyBackup()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "engine"
     */
    public function testPropertyEngine()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "proxy"
     */
    public function testPropertyProxy()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "tools"
     */
    public function testPropertyTools()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }
}
