<?php

declare(strict_types=1);

/**
 * Percona Everest schema
 *
 * # Authentication All requests to Everest API require `Authorization: Bearer <token>` header with a valid token in plain-text.  The token can be obtained by using `everestctl token reset` which resets the token and prints it to the screen.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Everest\Model;

use Everest\ObjectSerializer;

/**
 * DatabaseClusterStatus defines the observed state of DatabaseCluster.
 *
 * @implements \ArrayAccess<string, mixed>
 */
class DatabaseClusterStatus implements ModelInterface, \ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      */
    protected static string $openAPIModelName = 'DatabaseCluster_status';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'activeStorage' => 'string',
        'hostname' => 'string',
        'message' => 'string',
        'port' => 'int',
        'ready' => 'int',
        'size' => 'int',
        'status' => 'string',
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, null|string>
      */
    protected static array $openAPIFormats = [
        'activeStorage' => null,
        'hostname' => null,
        'message' => null,
        'port' => 'int32',
        'ready' => 'int32',
        'size' => 'int32',
        'status' => null,
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'activeStorage' => false,
        'hostname' => false,
        'message' => false,
        'port' => false,
        'ready' => false,
        'size' => false,
        'status' => false,
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, null|string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'activeStorage' => 'activeStorage',
        'hostname' => 'hostname',
        'message' => 'message',
        'port' => 'port',
        'ready' => 'ready',
        'size' => 'size',
        'status' => 'status',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'activeStorage' => 'setActiveStorage',
        'hostname' => 'setHostname',
        'message' => 'setMessage',
        'port' => 'setPort',
        'ready' => 'setReady',
        'size' => 'setSize',
        'status' => 'setStatus',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'activeStorage' => 'getActiveStorage',
        'hostname' => 'getHostname',
        'message' => 'getMessage',
        'port' => 'getPort',
        'ready' => 'getReady',
        'size' => 'getSize',
        'status' => 'getStatus',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @phpstan-var array<string, mixed>
     * @psalm-var array<string, mixed>
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array<string, mixed> $data Associated array of property values
     *                                   initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('activeStorage', $data ?? [], null);
        $this->setIfExists('hostname', $data ?? [], null);
        $this->setIfExists('message', $data ?? [], null);
        $this->setIfExists('port', $data ?? [], null);
        $this->setIfExists('ready', $data ?? [], null);
        $this->setIfExists('size', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param array<string, mixed> $fields
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return list<string> invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets activeStorage
     *
     * @return null|string
     */
    public function getActiveStorage(): mixed
    {
        return $this->container['activeStorage'];
    }

    /**
     * Sets activeStorage
     *
     * @param null|string $activeStorage ActiveStorage is the storage used in cluster (psmdb only)
     */
    public function setActiveStorage(mixed $activeStorage): static
    {
        if (is_null($activeStorage)) {
            throw new \InvalidArgumentException('non-nullable activeStorage cannot be null');
        }
        $this->container['activeStorage'] = $activeStorage;

        return $this;
    }

    /**
     * Gets hostname
     *
     * @return null|string
     */
    public function getHostname(): mixed
    {
        return $this->container['hostname'];
    }

    /**
     * Sets hostname
     *
     * @param null|string $hostname Hostname is the hostname where the cluster can be reached
     */
    public function setHostname(mixed $hostname): static
    {
        if (is_null($hostname)) {
            throw new \InvalidArgumentException('non-nullable hostname cannot be null');
        }
        $this->container['hostname'] = $hostname;

        return $this;
    }

    /**
     * Gets message
     *
     * @return null|string
     */
    public function getMessage(): mixed
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param null|string $message Message is extra information about the cluster
     */
    public function setMessage(mixed $message): static
    {
        if (is_null($message)) {
            throw new \InvalidArgumentException('non-nullable message cannot be null');
        }
        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets port
     *
     * @return null|int
     */
    public function getPort(): mixed
    {
        return $this->container['port'];
    }

    /**
     * Sets port
     *
     * @param null|int $port Port is the port where the cluster can be reached
     */
    public function setPort(mixed $port): static
    {
        if (is_null($port)) {
            throw new \InvalidArgumentException('non-nullable port cannot be null');
        }
        $this->container['port'] = $port;

        return $this;
    }

    /**
     * Gets ready
     *
     * @return null|int
     */
    public function getReady(): mixed
    {
        return $this->container['ready'];
    }

    /**
     * Sets ready
     *
     * @param null|int $ready Ready is the number of ready pods
     */
    public function setReady(mixed $ready): static
    {
        if (is_null($ready)) {
            throw new \InvalidArgumentException('non-nullable ready cannot be null');
        }
        $this->container['ready'] = $ready;

        return $this;
    }

    /**
     * Gets size
     *
     * @return null|int
     */
    public function getSize(): mixed
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     *
     * @param null|int $size Size is the total number of pods
     */
    public function setSize(mixed $size): static
    {
        if (is_null($size)) {
            throw new \InvalidArgumentException('non-nullable size cannot be null');
        }
        $this->container['size'] = $size;

        return $this;
    }

    /**
     * Gets status
     *
     * @return null|string
     */
    public function getStatus(): mixed
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param null|string $status Status is the status of the cluster
     */
    public function setStatus(mixed $status): static
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT,
        );
    }

    /**
     * Gets a header-safe presentation of the object
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


