<?php

declare(strict_types=1);

/**
 * Percona Everest schema
 *
 * # Authentication All requests to Everest API require `Authorization: Bearer <token>` header with a valid token in plain-text.  The token can be obtained by using `everestctl token reset` which resets the token and prints it to the screen.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Everest\Model;

use Everest\ObjectSerializer;

/**
 * Backup storage parameters
 *
 * @implements \ArrayAccess<string, mixed>
 */
class CreateBackupStorageParams implements ModelInterface, \ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      */
    protected static string $openAPIModelName = 'CreateBackupStorageParams';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'name' => 'string',
        'description' => 'string',
        'type' => 'string',
        'bucketName' => 'string',
        'accessKey' => 'string',
        'secretKey' => 'string',
        'url' => 'string',
        'region' => 'string',
        'allowedNamespaces' => 'string[]',
        'verifyTLS' => 'bool',
        'forcePathStyle' => 'bool',
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, null|string>
      */
    protected static array $openAPIFormats = [
        'name' => null,
        'description' => null,
        'type' => null,
        'bucketName' => null,
        'accessKey' => null,
        'secretKey' => null,
        'url' => null,
        'region' => null,
        'allowedNamespaces' => null,
        'verifyTLS' => null,
        'forcePathStyle' => null,
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'name' => false,
        'description' => false,
        'type' => false,
        'bucketName' => false,
        'accessKey' => false,
        'secretKey' => false,
        'url' => false,
        'region' => false,
        'allowedNamespaces' => false,
        'verifyTLS' => false,
        'forcePathStyle' => false,
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, null|string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'name' => 'name',
        'description' => 'description',
        'type' => 'type',
        'bucketName' => 'bucketName',
        'accessKey' => 'accessKey',
        'secretKey' => 'secretKey',
        'url' => 'url',
        'region' => 'region',
        'allowedNamespaces' => 'allowedNamespaces',
        'verifyTLS' => 'verifyTLS',
        'forcePathStyle' => 'forcePathStyle',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'name' => 'setName',
        'description' => 'setDescription',
        'type' => 'setType',
        'bucketName' => 'setBucketName',
        'accessKey' => 'setAccessKey',
        'secretKey' => 'setSecretKey',
        'url' => 'setUrl',
        'region' => 'setRegion',
        'allowedNamespaces' => 'setAllowedNamespaces',
        'verifyTLS' => 'setVerifyTLS',
        'forcePathStyle' => 'setForcePathStyle',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'name' => 'getName',
        'description' => 'getDescription',
        'type' => 'getType',
        'bucketName' => 'getBucketName',
        'accessKey' => 'getAccessKey',
        'secretKey' => 'getSecretKey',
        'url' => 'getUrl',
        'region' => 'getRegion',
        'allowedNamespaces' => 'getAllowedNamespaces',
        'verifyTLS' => 'getVerifyTLS',
        'forcePathStyle' => 'getForcePathStyle',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }

    public const TYPE_S3 = 's3';
    public const TYPE_AZURE = 'azure';

    /**
     * Gets allowable values of the enum
     *
     * @return list<string>
     */
    public function getTypeAllowableValues(): array
    {
        return [
            self::TYPE_S3,
            self::TYPE_AZURE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @phpstan-var array<string, mixed>
     * @psalm-var array<string, mixed>
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array<string, mixed> $data Associated array of property values
     *                                   initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('bucketName', $data ?? [], null);
        $this->setIfExists('accessKey', $data ?? [], null);
        $this->setIfExists('secretKey', $data ?? [], null);
        $this->setIfExists('url', $data ?? [], null);
        $this->setIfExists('region', $data ?? [], null);
        $this->setIfExists('allowedNamespaces', $data ?? [], null);
        $this->setIfExists('verifyTLS', $data ?? [], true);
        $this->setIfExists('forcePathStyle', $data ?? [], false);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param array<string, mixed> $fields
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return list<string> invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['bucketName'] === null) {
            $invalidProperties[] = "'bucketName' can't be null";
        }
        if ($this->container['accessKey'] === null) {
            $invalidProperties[] = "'accessKey' can't be null";
        }
        if ($this->container['secretKey'] === null) {
            $invalidProperties[] = "'secretKey' can't be null";
        }
        if ($this->container['allowedNamespaces'] === null) {
            $invalidProperties[] = "'allowedNamespaces' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName(): mixed
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name A user defined string name of the storage in the DNS name format https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#dns-label-names
     */
    public function setName(mixed $name): static
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return null|string
     */
    public function getDescription(): mixed
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param null|string $description description
     */
    public function setDescription(mixed $description): static
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType(): mixed
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     */
    public function setType(mixed $type): static
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets bucketName
     *
     * @return string
     */
    public function getBucketName(): mixed
    {
        return $this->container['bucketName'];
    }

    /**
     * Sets bucketName
     *
     * @param string $bucketName The cloud storage bucket/container name
     */
    public function setBucketName(mixed $bucketName): static
    {
        if (is_null($bucketName)) {
            throw new \InvalidArgumentException('non-nullable bucketName cannot be null');
        }
        $this->container['bucketName'] = $bucketName;

        return $this;
    }

    /**
     * Gets accessKey
     *
     * @return string
     */
    public function getAccessKey(): mixed
    {
        return $this->container['accessKey'];
    }

    /**
     * Sets accessKey
     *
     * @param string $accessKey accessKey
     */
    public function setAccessKey(mixed $accessKey): static
    {
        if (is_null($accessKey)) {
            throw new \InvalidArgumentException('non-nullable accessKey cannot be null');
        }
        $this->container['accessKey'] = $accessKey;

        return $this;
    }

    /**
     * Gets secretKey
     *
     * @return string
     */
    public function getSecretKey(): mixed
    {
        return $this->container['secretKey'];
    }

    /**
     * Sets secretKey
     *
     * @param string $secretKey secretKey
     */
    public function setSecretKey(mixed $secretKey): static
    {
        if (is_null($secretKey)) {
            throw new \InvalidArgumentException('non-nullable secretKey cannot be null');
        }
        $this->container['secretKey'] = $secretKey;

        return $this;
    }

    /**
     * Gets url
     *
     * @return null|string
     */
    public function getUrl(): mixed
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param null|string $url url
     */
    public function setUrl(mixed $url): static
    {
        if (is_null($url)) {
            throw new \InvalidArgumentException('non-nullable url cannot be null');
        }
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets region
     *
     * @return null|string
     */
    public function getRegion(): mixed
    {
        return $this->container['region'];
    }

    /**
     * Sets region
     *
     * @param null|string $region region
     */
    public function setRegion(mixed $region): static
    {
        if (is_null($region)) {
            throw new \InvalidArgumentException('non-nullable region cannot be null');
        }
        $this->container['region'] = $region;

        return $this;
    }

    /**
     * Gets allowedNamespaces
     *
     * @return string[]
     */
    public function getAllowedNamespaces(): mixed
    {
        return $this->container['allowedNamespaces'];
    }

    /**
     * Sets allowedNamespaces
     *
     * @param string[] $allowedNamespaces List of namespaces allowed to use this backup storage
     */
    public function setAllowedNamespaces(mixed $allowedNamespaces): static
    {
        if (is_null($allowedNamespaces)) {
            throw new \InvalidArgumentException('non-nullable allowedNamespaces cannot be null');
        }
        $this->container['allowedNamespaces'] = $allowedNamespaces;

        return $this;
    }

    /**
     * Gets verifyTLS
     *
     * @return null|bool
     */
    public function getVerifyTLS(): mixed
    {
        return $this->container['verifyTLS'];
    }

    /**
     * Sets verifyTLS
     *
     * @param null|bool $verifyTLS verifyTLS
     */
    public function setVerifyTLS(mixed $verifyTLS): static
    {
        if (is_null($verifyTLS)) {
            throw new \InvalidArgumentException('non-nullable verifyTLS cannot be null');
        }
        $this->container['verifyTLS'] = $verifyTLS;

        return $this;
    }

    /**
     * Gets forcePathStyle
     *
     * @return null|bool
     */
    public function getForcePathStyle(): mixed
    {
        return $this->container['forcePathStyle'];
    }

    /**
     * Sets forcePathStyle
     *
     * @param null|bool $forcePathStyle forcePathStyle
     */
    public function setForcePathStyle(mixed $forcePathStyle): static
    {
        if (is_null($forcePathStyle)) {
            throw new \InvalidArgumentException('non-nullable forcePathStyle cannot be null');
        }
        $this->container['forcePathStyle'] = $forcePathStyle;

        return $this;
    }
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT,
        );
    }

    /**
     * Gets a header-safe presentation of the object
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


