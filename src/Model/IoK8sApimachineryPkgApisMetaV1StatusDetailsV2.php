<?php

declare(strict_types=1);

/**
 * Percona Everest schema
 *
 * # Authentication All requests to Everest API require `Authorization: Bearer <token>` header with a valid token in plain-text.  The token can be obtained by using `everestctl token reset` which resets the token and prints it to the screen.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Everest\Model;

use Everest\ObjectSerializer;

/**
 * StatusDetails is a set of additional properties that MAY be set by the server to provide additional information about a response. The Reason field of a Status object defines what attributes will be set. Clients must ignore fields that do not match the defined type of each attribute, and should assume that any attribute may be empty, invalid, or under defined.
 *
 * @implements \ArrayAccess<string, mixed>
 */
class IoK8sApimachineryPkgApisMetaV1StatusDetailsV2 implements ModelInterface, \ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      */
    protected static string $openAPIModelName = 'io.k8s.apimachinery.pkg.apis.meta.v1.StatusDetails_v2';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'causes' => '\Everest\Model\IoK8sApimachineryPkgApisMetaV1StatusCause[]',
        'group' => 'string',
        'kind' => 'string',
        'name' => 'string',
        'retryAfterSeconds' => 'int',
        'uid' => 'string',
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, null|string>
      */
    protected static array $openAPIFormats = [
        'causes' => null,
        'group' => null,
        'kind' => null,
        'name' => null,
        'retryAfterSeconds' => 'int32',
        'uid' => null,
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'causes' => false,
        'group' => false,
        'kind' => false,
        'name' => false,
        'retryAfterSeconds' => false,
        'uid' => false,
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, null|string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'causes' => 'causes',
        'group' => 'group',
        'kind' => 'kind',
        'name' => 'name',
        'retryAfterSeconds' => 'retryAfterSeconds',
        'uid' => 'uid',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'causes' => 'setCauses',
        'group' => 'setGroup',
        'kind' => 'setKind',
        'name' => 'setName',
        'retryAfterSeconds' => 'setRetryAfterSeconds',
        'uid' => 'setUid',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'causes' => 'getCauses',
        'group' => 'getGroup',
        'kind' => 'getKind',
        'name' => 'getName',
        'retryAfterSeconds' => 'getRetryAfterSeconds',
        'uid' => 'getUid',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @phpstan-var array<string, mixed>
     * @psalm-var array<string, mixed>
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array<string, mixed> $data Associated array of property values
     *                                   initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('causes', $data ?? [], null);
        $this->setIfExists('group', $data ?? [], null);
        $this->setIfExists('kind', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('retryAfterSeconds', $data ?? [], null);
        $this->setIfExists('uid', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param array<string, mixed> $fields
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return list<string> invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets causes
     *
     * @return null|\Everest\Model\IoK8sApimachineryPkgApisMetaV1StatusCause[]
     */
    public function getCauses(): mixed
    {
        return $this->container['causes'];
    }

    /**
     * Sets causes
     *
     * @param null|\Everest\Model\IoK8sApimachineryPkgApisMetaV1StatusCause[] $causes The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.
     */
    public function setCauses(mixed $causes): static
    {
        if (is_null($causes)) {
            throw new \InvalidArgumentException('non-nullable causes cannot be null');
        }
        $this->container['causes'] = $causes;

        return $this;
    }

    /**
     * Gets group
     *
     * @return null|string
     */
    public function getGroup(): mixed
    {
        return $this->container['group'];
    }

    /**
     * Sets group
     *
     * @param null|string $group The group attribute of the resource associated with the status StatusReason.
     */
    public function setGroup(mixed $group): static
    {
        if (is_null($group)) {
            throw new \InvalidArgumentException('non-nullable group cannot be null');
        }
        $this->container['group'] = $group;

        return $this;
    }

    /**
     * Gets kind
     *
     * @return null|string
     */
    public function getKind(): mixed
    {
        return $this->container['kind'];
    }

    /**
     * Sets kind
     *
     * @param null|string $kind The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     */
    public function setKind(mixed $kind): static
    {
        if (is_null($kind)) {
            throw new \InvalidArgumentException('non-nullable kind cannot be null');
        }
        $this->container['kind'] = $kind;

        return $this;
    }

    /**
     * Gets name
     *
     * @return null|string
     */
    public function getName(): mixed
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param null|string $name The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).
     */
    public function setName(mixed $name): static
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets retryAfterSeconds
     *
     * @return null|int
     */
    public function getRetryAfterSeconds(): mixed
    {
        return $this->container['retryAfterSeconds'];
    }

    /**
     * Sets retryAfterSeconds
     *
     * @param null|int $retryAfterSeconds If specified, the time in seconds before the operation should be retried. Some errors may indicate the client must take an alternate action - for those errors this field may indicate how long to wait before taking the alternate action.
     */
    public function setRetryAfterSeconds(mixed $retryAfterSeconds): static
    {
        if (is_null($retryAfterSeconds)) {
            throw new \InvalidArgumentException('non-nullable retryAfterSeconds cannot be null');
        }
        $this->container['retryAfterSeconds'] = $retryAfterSeconds;

        return $this;
    }

    /**
     * Gets uid
     *
     * @return null|string
     */
    public function getUid(): mixed
    {
        return $this->container['uid'];
    }

    /**
     * Sets uid
     *
     * @param null|string $uid UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids
     */
    public function setUid(mixed $uid): static
    {
        if (is_null($uid)) {
            throw new \InvalidArgumentException('non-nullable uid cannot be null');
        }
        $this->container['uid'] = $uid;

        return $this;
    }
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT,
        );
    }

    /**
     * Gets a header-safe presentation of the object
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


