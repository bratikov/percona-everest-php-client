<?php

declare(strict_types=1);

/**
 * Percona Everest schema
 *
 * # Authentication All requests to Everest API require `Authorization: Bearer <token>` header with a valid token in plain-text.  The token can be obtained by using `everestctl token reset` which resets the token and prints it to the screen.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Everest\Model;

use Everest\ObjectSerializer;

/**
 * DatabaseClusterSpec defines the desired state of DatabaseCluster.
 *
 * @implements \ArrayAccess<string, mixed>
 */
class DatabaseClusterSpec implements ModelInterface, \ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      */
    protected static string $openAPIModelName = 'DatabaseCluster_spec';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'allowUnsafeConfiguration' => 'bool',
        'backup' => '\Everest\Model\DatabaseClusterSpecBackup',
        'dataSource' => '\Everest\Model\DatabaseClusterSpecDataSource',
        'engine' => '\Everest\Model\DatabaseClusterSpecEngine',
        'monitoring' => '\Everest\Model\DatabaseClusterSpecMonitoring',
        'paused' => 'bool',
        'proxy' => '\Everest\Model\DatabaseClusterSpecProxy',
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, null|string>
      */
    protected static array $openAPIFormats = [
        'allowUnsafeConfiguration' => null,
        'backup' => null,
        'dataSource' => null,
        'engine' => null,
        'monitoring' => null,
        'paused' => null,
        'proxy' => null,
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'allowUnsafeConfiguration' => false,
        'backup' => false,
        'dataSource' => false,
        'engine' => false,
        'monitoring' => false,
        'paused' => false,
        'proxy' => false,
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, null|string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'allowUnsafeConfiguration' => 'allowUnsafeConfiguration',
        'backup' => 'backup',
        'dataSource' => 'dataSource',
        'engine' => 'engine',
        'monitoring' => 'monitoring',
        'paused' => 'paused',
        'proxy' => 'proxy',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'allowUnsafeConfiguration' => 'setAllowUnsafeConfiguration',
        'backup' => 'setBackup',
        'dataSource' => 'setDataSource',
        'engine' => 'setEngine',
        'monitoring' => 'setMonitoring',
        'paused' => 'setPaused',
        'proxy' => 'setProxy',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'allowUnsafeConfiguration' => 'getAllowUnsafeConfiguration',
        'backup' => 'getBackup',
        'dataSource' => 'getDataSource',
        'engine' => 'getEngine',
        'monitoring' => 'getMonitoring',
        'paused' => 'getPaused',
        'proxy' => 'getProxy',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @phpstan-var array<string, mixed>
     * @psalm-var array<string, mixed>
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array<string, mixed> $data Associated array of property values
     *                                   initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('allowUnsafeConfiguration', $data ?? [], null);
        $this->setIfExists('backup', $data ?? [], null);
        $this->setIfExists('dataSource', $data ?? [], null);
        $this->setIfExists('engine', $data ?? [], null);
        $this->setIfExists('monitoring', $data ?? [], null);
        $this->setIfExists('paused', $data ?? [], null);
        $this->setIfExists('proxy', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param array<string, mixed> $fields
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return list<string> invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['engine'] === null) {
            $invalidProperties[] = "'engine' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets allowUnsafeConfiguration
     *
     * @return null|bool
     */
    public function getAllowUnsafeConfiguration(): mixed
    {
        return $this->container['allowUnsafeConfiguration'];
    }

    /**
     * Sets allowUnsafeConfiguration
     *
     * @param null|bool $allowUnsafeConfiguration AllowUnsafeConfiguration field used to ensure that the user can create configurations unfit for production use.
     */
    public function setAllowUnsafeConfiguration(mixed $allowUnsafeConfiguration): static
    {
        if (is_null($allowUnsafeConfiguration)) {
            throw new \InvalidArgumentException('non-nullable allowUnsafeConfiguration cannot be null');
        }
        $this->container['allowUnsafeConfiguration'] = $allowUnsafeConfiguration;

        return $this;
    }

    /**
     * Gets backup
     *
     * @return null|\Everest\Model\DatabaseClusterSpecBackup
     */
    public function getBackup(): mixed
    {
        return $this->container['backup'];
    }

    /**
     * Sets backup
     *
     * @param null|\Everest\Model\DatabaseClusterSpecBackup $backup backup
     */
    public function setBackup(mixed $backup): static
    {
        if (is_null($backup)) {
            throw new \InvalidArgumentException('non-nullable backup cannot be null');
        }
        $this->container['backup'] = $backup;

        return $this;
    }

    /**
     * Gets dataSource
     *
     * @return null|\Everest\Model\DatabaseClusterSpecDataSource
     */
    public function getDataSource(): mixed
    {
        return $this->container['dataSource'];
    }

    /**
     * Sets dataSource
     *
     * @param null|\Everest\Model\DatabaseClusterSpecDataSource $dataSource dataSource
     */
    public function setDataSource(mixed $dataSource): static
    {
        if (is_null($dataSource)) {
            throw new \InvalidArgumentException('non-nullable dataSource cannot be null');
        }
        $this->container['dataSource'] = $dataSource;

        return $this;
    }

    /**
     * Gets engine
     *
     * @return \Everest\Model\DatabaseClusterSpecEngine
     */
    public function getEngine(): mixed
    {
        return $this->container['engine'];
    }

    /**
     * Sets engine
     *
     * @param \Everest\Model\DatabaseClusterSpecEngine $engine engine
     */
    public function setEngine(mixed $engine): static
    {
        if (is_null($engine)) {
            throw new \InvalidArgumentException('non-nullable engine cannot be null');
        }
        $this->container['engine'] = $engine;

        return $this;
    }

    /**
     * Gets monitoring
     *
     * @return null|\Everest\Model\DatabaseClusterSpecMonitoring
     */
    public function getMonitoring(): mixed
    {
        return $this->container['monitoring'];
    }

    /**
     * Sets monitoring
     *
     * @param null|\Everest\Model\DatabaseClusterSpecMonitoring $monitoring monitoring
     */
    public function setMonitoring(mixed $monitoring): static
    {
        if (is_null($monitoring)) {
            throw new \InvalidArgumentException('non-nullable monitoring cannot be null');
        }
        $this->container['monitoring'] = $monitoring;

        return $this;
    }

    /**
     * Gets paused
     *
     * @return null|bool
     */
    public function getPaused(): mixed
    {
        return $this->container['paused'];
    }

    /**
     * Sets paused
     *
     * @param null|bool $paused Paused is a flag to stop the cluster
     */
    public function setPaused(mixed $paused): static
    {
        if (is_null($paused)) {
            throw new \InvalidArgumentException('non-nullable paused cannot be null');
        }
        $this->container['paused'] = $paused;

        return $this;
    }

    /**
     * Gets proxy
     *
     * @return null|\Everest\Model\DatabaseClusterSpecProxy
     */
    public function getProxy(): mixed
    {
        return $this->container['proxy'];
    }

    /**
     * Sets proxy
     *
     * @param null|\Everest\Model\DatabaseClusterSpecProxy $proxy proxy
     */
    public function setProxy(mixed $proxy): static
    {
        if (is_null($proxy)) {
            throw new \InvalidArgumentException('non-nullable proxy cannot be null');
        }
        $this->container['proxy'] = $proxy;

        return $this;
    }
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT,
        );
    }

    /**
     * Gets a header-safe presentation of the object
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


