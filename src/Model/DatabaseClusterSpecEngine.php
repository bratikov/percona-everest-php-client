<?php

declare(strict_types=1);

/**
 * Percona Everest schema
 *
 * # Authentication All requests to Everest API require `Authorization: Bearer <token>` header with a valid token in plain-text.  The token can be obtained by using `everestctl token reset` which resets the token and prints it to the screen.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Everest\Model;

use Everest\ObjectSerializer;

/**
 * Engine is the database engine specification
 *
 * @implements \ArrayAccess<string, mixed>
 */
class DatabaseClusterSpecEngine implements ModelInterface, \ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      */
    protected static string $openAPIModelName = 'DatabaseCluster_spec_engine';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'config' => 'string',
        'replicas' => 'int',
        'resources' => '\Everest\Model\DatabaseClusterSpecEngineResources',
        'storage' => '\Everest\Model\DatabaseClusterSpecEngineStorage',
        'type' => 'string',
        'userSecretsName' => 'string',
        'version' => 'string',
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, null|string>
      */
    protected static array $openAPIFormats = [
        'config' => null,
        'replicas' => 'int32',
        'resources' => null,
        'storage' => null,
        'type' => null,
        'userSecretsName' => null,
        'version' => null,
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'config' => false,
        'replicas' => false,
        'resources' => false,
        'storage' => false,
        'type' => false,
        'userSecretsName' => false,
        'version' => false,
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, null|string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'config' => 'config',
        'replicas' => 'replicas',
        'resources' => 'resources',
        'storage' => 'storage',
        'type' => 'type',
        'userSecretsName' => 'userSecretsName',
        'version' => 'version',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'config' => 'setConfig',
        'replicas' => 'setReplicas',
        'resources' => 'setResources',
        'storage' => 'setStorage',
        'type' => 'setType',
        'userSecretsName' => 'setUserSecretsName',
        'version' => 'setVersion',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'config' => 'getConfig',
        'replicas' => 'getReplicas',
        'resources' => 'getResources',
        'storage' => 'getStorage',
        'type' => 'getType',
        'userSecretsName' => 'getUserSecretsName',
        'version' => 'getVersion',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }

    public const TYPE_PXC = 'pxc';
    public const TYPE_POSTGRESQL = 'postgresql';
    public const TYPE_PSMDB = 'psmdb';

    /**
     * Gets allowable values of the enum
     *
     * @return list<string>
     */
    public function getTypeAllowableValues(): array
    {
        return [
            self::TYPE_PXC,
            self::TYPE_POSTGRESQL,
            self::TYPE_PSMDB,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @phpstan-var array<string, mixed>
     * @psalm-var array<string, mixed>
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array<string, mixed> $data Associated array of property values
     *                                   initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('config', $data ?? [], null);
        $this->setIfExists('replicas', $data ?? [], null);
        $this->setIfExists('resources', $data ?? [], null);
        $this->setIfExists('storage', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('userSecretsName', $data ?? [], null);
        $this->setIfExists('version', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param array<string, mixed> $fields
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return list<string> invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if (!is_null($this->container['replicas']) && ($this->container['replicas'] < 1)) {
            $invalidProperties[] = "invalid value for 'replicas', must be bigger than or equal to 1.";
        }

        if ($this->container['storage'] === null) {
            $invalidProperties[] = "'storage' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets config
     *
     * @return null|string
     */
    public function getConfig(): mixed
    {
        return $this->container['config'];
    }

    /**
     * Sets config
     *
     * @param null|string $config Config is the engine configuration
     */
    public function setConfig(mixed $config): static
    {
        if (is_null($config)) {
            throw new \InvalidArgumentException('non-nullable config cannot be null');
        }
        $this->container['config'] = $config;

        return $this;
    }

    /**
     * Gets replicas
     *
     * @return null|int
     */
    public function getReplicas(): mixed
    {
        return $this->container['replicas'];
    }

    /**
     * Sets replicas
     *
     * @param null|int $replicas Replicas is the number of engine replicas
     */
    public function setReplicas(mixed $replicas): static
    {
        if (is_null($replicas)) {
            throw new \InvalidArgumentException('non-nullable replicas cannot be null');
        }
        if (($replicas < 1)) {
            throw new \InvalidArgumentException('invalid value for $replicas when calling DatabaseClusterSpecEngine., must be bigger than or equal to 1.');
        }
        $this->container['replicas'] = $replicas;

        return $this;
    }

    /**
     * Gets resources
     *
     * @return null|\Everest\Model\DatabaseClusterSpecEngineResources
     */
    public function getResources(): mixed
    {
        return $this->container['resources'];
    }

    /**
     * Sets resources
     *
     * @param null|\Everest\Model\DatabaseClusterSpecEngineResources $resources resources
     */
    public function setResources(mixed $resources): static
    {
        if (is_null($resources)) {
            throw new \InvalidArgumentException('non-nullable resources cannot be null');
        }
        $this->container['resources'] = $resources;

        return $this;
    }

    /**
     * Gets storage
     *
     * @return \Everest\Model\DatabaseClusterSpecEngineStorage
     */
    public function getStorage(): mixed
    {
        return $this->container['storage'];
    }

    /**
     * Sets storage
     *
     * @param \Everest\Model\DatabaseClusterSpecEngineStorage $storage storage
     */
    public function setStorage(mixed $storage): static
    {
        if (is_null($storage)) {
            throw new \InvalidArgumentException('non-nullable storage cannot be null');
        }
        $this->container['storage'] = $storage;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType(): mixed
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type Type is the engine type
     */
    public function setType(mixed $type): static
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets userSecretsName
     *
     * @return null|string
     */
    public function getUserSecretsName(): mixed
    {
        return $this->container['userSecretsName'];
    }

    /**
     * Sets userSecretsName
     *
     * @param null|string $userSecretsName UserSecretsName is the name of the secret containing the user secrets
     */
    public function setUserSecretsName(mixed $userSecretsName): static
    {
        if (is_null($userSecretsName)) {
            throw new \InvalidArgumentException('non-nullable userSecretsName cannot be null');
        }
        $this->container['userSecretsName'] = $userSecretsName;

        return $this;
    }

    /**
     * Gets version
     *
     * @return null|string
     */
    public function getVersion(): mixed
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param null|string $version Version is the engine version
     */
    public function setVersion(mixed $version): static
    {
        if (is_null($version)) {
            throw new \InvalidArgumentException('non-nullable version cannot be null');
        }
        $this->container['version'] = $version;

        return $this;
    }
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT,
        );
    }

    /**
     * Gets a header-safe presentation of the object
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


