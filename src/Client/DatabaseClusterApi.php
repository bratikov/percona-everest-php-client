<?php

declare(strict_types=1);

/**
 * Percona Everest schema
 *
 * # Authentication All requests to Everest API require `Authorization: Bearer <token>` header with a valid token in plain-text.  The token can be obtained by using `everestctl token reset` which resets the token and prints it to the screen.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Everest\Client;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\GuzzleException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Promise\PromiseInterface;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Everest\ApiException;
use Everest\Configuration;
use Everest\HeaderSelector;
use Everest\ObjectSerializer;

class DatabaseClusterApi
{
    /**
     * @var array<string, list<string>>
     */
    public const contentTypes = [
        'createDatabaseCluster' => [
            'application/json',
        ],
        'deleteDatabaseCluster' => [
            'application/json',
        ],
        'getDatabaseCluster' => [
            'application/json',
        ],
        'getDatabaseClusterCredentials' => [
            'application/json',
        ],
        'getDatabaseClusterPitr' => [
            'application/json',
        ],
        'listDatabaseClusters' => [
            'application/json',
        ],
        'updateDatabaseCluster' => [
            'application/json',
        ],
    ];

    /**
     * @param int $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        private readonly ClientInterface $client = new Client(),
        private readonly Configuration $config = new Configuration(),
        private readonly HeaderSelector $headerSelector = new HeaderSelector(),
        private int $hostIndex = 0,
    ) {
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex(int $hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex(): int
    {
        return $this->hostIndex;
    }

    public function getConfig(): Configuration
    {
        return $this->config;
    }

    /**
     * createDatabaseCluster: Create a database cluster
     *
     * @param  string $namespace Name of the namespace (required)
     * @param  \Everest\Model\DatabaseCluster $databaseCluster The database cluster object to be created (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDatabaseCluster'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws GuzzleException
     * @throws \InvalidArgumentException
     *
     * @return \Everest\Model\DatabaseCluster|\Everest\Model\DatabaseCluster|\Everest\Model\DatabaseCluster|\Everest\Model\Error|\Everest\Model\Error
     */
    public function createDatabaseCluster(
        mixed $namespace,
        mixed $databaseCluster,
        string $contentType = self::contentTypes['createDatabaseCluster'][0],
    ): mixed {
        list($response) = $this->createDatabaseClusterWithHttpInfo($namespace, $databaseCluster, $contentType);

        return $response;
    }

    /**
     * createDatabaseClusterWithHttpInfo: Create a database cluster
     *
     * @param  string $namespace Name of the namespace (required)
     * @param  \Everest\Model\DatabaseCluster $databaseCluster The database cluster object to be created (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDatabaseCluster'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws GuzzleException
     * @throws \InvalidArgumentException
     *
     * @return array{
     *     \Everest\Model\DatabaseCluster|\Everest\Model\DatabaseCluster|\Everest\Model\DatabaseCluster|\Everest\Model\Error|\Everest\Model\Error,
     *     int,
     *     list<string>,
     * } Array of response body, status, and response headers
     */
    public function createDatabaseClusterWithHttpInfo(
        mixed $namespace,
        mixed $databaseCluster,
        string $contentType = self::contentTypes['createDatabaseCluster'][0],
    ): array {
        $request = $this->createDatabaseClusterRequest($namespace, $databaseCluster, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Everest\Model\DatabaseCluster' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Everest\Model\DatabaseCluster' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Everest\Model\DatabaseCluster', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 201:
                    if ('\Everest\Model\DatabaseCluster' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Everest\Model\DatabaseCluster' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Everest\Model\DatabaseCluster', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 202:
                    if ('\Everest\Model\DatabaseCluster' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Everest\Model\DatabaseCluster' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Everest\Model\DatabaseCluster', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Everest\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Everest\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Everest\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Everest\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Everest\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Everest\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Everest\Model\DatabaseCluster';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Everest\Model\DatabaseCluster',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Everest\Model\DatabaseCluster',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Everest\Model\DatabaseCluster',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Everest\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Everest\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * createDatabaseClusterAsync: Create a database cluster
     *
     * @param  string $namespace Name of the namespace (required)
     * @param  \Everest\Model\DatabaseCluster $databaseCluster The database cluster object to be created (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDatabaseCluster'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     */
    public function createDatabaseClusterAsync(
        mixed $namespace,
        mixed $databaseCluster,
        string $contentType = self::contentTypes['createDatabaseCluster'][0],
    ): PromiseInterface {
        return $this->createDatabaseClusterAsyncWithHttpInfo($namespace, $databaseCluster, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * createDatabaseClusterAsyncWithHttpInfo: Create a database cluster
     *
     * @param  string $namespace Name of the namespace (required)
     * @param  \Everest\Model\DatabaseCluster $databaseCluster The database cluster object to be created (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDatabaseCluster'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     */
    public function createDatabaseClusterAsyncWithHttpInfo(
        mixed $namespace,
        mixed $databaseCluster,
        string $contentType = self::contentTypes['createDatabaseCluster'][0],
    ): PromiseInterface {
        $returnType = '\Everest\Model\DatabaseCluster';
        $request = $this->createDatabaseClusterRequest($namespace, $databaseCluster, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createDatabaseCluster'
     *
     * @param  string $namespace Name of the namespace (required)
     * @param  \Everest\Model\DatabaseCluster $databaseCluster The database cluster object to be created (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDatabaseCluster'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     */
    public function createDatabaseClusterRequest(
        mixed $namespace,
        mixed $databaseCluster,
        string $contentType = self::contentTypes['createDatabaseCluster'][0],
    ): Request {
        // verify the required parameter 'namespace' is set
        if ($namespace === null || (is_array($namespace) && count($namespace) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $namespace when calling createDatabaseCluster'
            );
        }

        // verify the required parameter 'databaseCluster' is set
        if ($databaseCluster === null || (is_array($databaseCluster) && count($databaseCluster) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $databaseCluster when calling createDatabaseCluster'
            );
        }

        $resourcePath = '/namespaces/{namespace}/database-clusters';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if ($namespace !== null) {
            $resourcePath = str_replace(
                '{' . 'namespace' . '}',
                ObjectSerializer::toPathValue($namespace),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($databaseCluster)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($databaseCluster));
            } else {
                $httpBody = $databaseCluster;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * deleteDatabaseCluster: Delete the specified database cluster
     *
     * @param  string $namespace Name of the namespace (required)
     * @param  string $name Name of the database cluster. Can be found under Metadata[\&quot;name\&quot;] of the DatabaseCluster object. (required)
     * @param  bool $cleanupBackupStorage If set, remove the backed up data from storage (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteDatabaseCluster'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws GuzzleException
     * @throws \InvalidArgumentException
     *
     * @return \Everest\Model\IoK8sApimachineryPkgApisMetaV1StatusV2|\Everest\Model\Error|\Everest\Model\Error
     */
    public function deleteDatabaseCluster(
        mixed $namespace,
        mixed $name,
        mixed $cleanupBackupStorage = null,
        string $contentType = self::contentTypes['deleteDatabaseCluster'][0],
    ): mixed {
        list($response) = $this->deleteDatabaseClusterWithHttpInfo($namespace, $name, $cleanupBackupStorage, $contentType);

        return $response;
    }

    /**
     * deleteDatabaseClusterWithHttpInfo: Delete the specified database cluster
     *
     * @param  string $namespace Name of the namespace (required)
     * @param  string $name Name of the database cluster. Can be found under Metadata[\&quot;name\&quot;] of the DatabaseCluster object. (required)
     * @param  bool $cleanupBackupStorage If set, remove the backed up data from storage (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteDatabaseCluster'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws GuzzleException
     * @throws \InvalidArgumentException
     *
     * @return array{
     *     \Everest\Model\IoK8sApimachineryPkgApisMetaV1StatusV2|\Everest\Model\Error|\Everest\Model\Error,
     *     int,
     *     list<string>,
     * } Array of response body, status, and response headers
     */
    public function deleteDatabaseClusterWithHttpInfo(
        mixed $namespace,
        mixed $name,
        mixed $cleanupBackupStorage = null,
        string $contentType = self::contentTypes['deleteDatabaseCluster'][0],
    ): array {
        $request = $this->deleteDatabaseClusterRequest($namespace, $name, $cleanupBackupStorage, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Everest\Model\IoK8sApimachineryPkgApisMetaV1StatusV2' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Everest\Model\IoK8sApimachineryPkgApisMetaV1StatusV2' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Everest\Model\IoK8sApimachineryPkgApisMetaV1StatusV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Everest\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Everest\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Everest\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Everest\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Everest\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Everest\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Everest\Model\IoK8sApimachineryPkgApisMetaV1StatusV2';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Everest\Model\IoK8sApimachineryPkgApisMetaV1StatusV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Everest\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Everest\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * deleteDatabaseClusterAsync: Delete the specified database cluster
     *
     * @param  string $namespace Name of the namespace (required)
     * @param  string $name Name of the database cluster. Can be found under Metadata[\&quot;name\&quot;] of the DatabaseCluster object. (required)
     * @param  bool $cleanupBackupStorage If set, remove the backed up data from storage (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteDatabaseCluster'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     */
    public function deleteDatabaseClusterAsync(
        mixed $namespace,
        mixed $name,
        mixed $cleanupBackupStorage = null,
        string $contentType = self::contentTypes['deleteDatabaseCluster'][0],
    ): PromiseInterface {
        return $this->deleteDatabaseClusterAsyncWithHttpInfo($namespace, $name, $cleanupBackupStorage, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * deleteDatabaseClusterAsyncWithHttpInfo: Delete the specified database cluster
     *
     * @param  string $namespace Name of the namespace (required)
     * @param  string $name Name of the database cluster. Can be found under Metadata[\&quot;name\&quot;] of the DatabaseCluster object. (required)
     * @param  bool $cleanupBackupStorage If set, remove the backed up data from storage (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteDatabaseCluster'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     */
    public function deleteDatabaseClusterAsyncWithHttpInfo(
        mixed $namespace,
        mixed $name,
        mixed $cleanupBackupStorage = null,
        string $contentType = self::contentTypes['deleteDatabaseCluster'][0],
    ): PromiseInterface {
        $returnType = '\Everest\Model\IoK8sApimachineryPkgApisMetaV1StatusV2';
        $request = $this->deleteDatabaseClusterRequest($namespace, $name, $cleanupBackupStorage, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteDatabaseCluster'
     *
     * @param  string $namespace Name of the namespace (required)
     * @param  string $name Name of the database cluster. Can be found under Metadata[\&quot;name\&quot;] of the DatabaseCluster object. (required)
     * @param  bool $cleanupBackupStorage If set, remove the backed up data from storage (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteDatabaseCluster'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     */
    public function deleteDatabaseClusterRequest(
        mixed $namespace,
        mixed $name,
        mixed $cleanupBackupStorage = null,
        string $contentType = self::contentTypes['deleteDatabaseCluster'][0],
    ): Request {
        // verify the required parameter 'namespace' is set
        if ($namespace === null || (is_array($namespace) && count($namespace) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $namespace when calling deleteDatabaseCluster'
            );
        }

        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling deleteDatabaseCluster'
            );
        }


        $resourcePath = '/namespaces/{namespace}/database-clusters/{name}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $cleanupBackupStorage,
            'cleanupBackupStorage', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // path params
        if ($namespace !== null) {
            $resourcePath = str_replace(
                '{' . 'namespace' . '}',
                ObjectSerializer::toPathValue($namespace),
                $resourcePath
            );
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * getDatabaseCluster: Get the specified database cluster
     *
     * @param  string $namespace Name of the namespace (required)
     * @param  string $name Name of the database cluster. Can be found under Metadata[\&quot;name\&quot;] of the DatabaseCluster object. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDatabaseCluster'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws GuzzleException
     * @throws \InvalidArgumentException
     *
     * @return \Everest\Model\DatabaseCluster|\Everest\Model\Error|\Everest\Model\Error
     */
    public function getDatabaseCluster(
        mixed $namespace,
        mixed $name,
        string $contentType = self::contentTypes['getDatabaseCluster'][0],
    ): mixed {
        list($response) = $this->getDatabaseClusterWithHttpInfo($namespace, $name, $contentType);

        return $response;
    }

    /**
     * getDatabaseClusterWithHttpInfo: Get the specified database cluster
     *
     * @param  string $namespace Name of the namespace (required)
     * @param  string $name Name of the database cluster. Can be found under Metadata[\&quot;name\&quot;] of the DatabaseCluster object. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDatabaseCluster'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws GuzzleException
     * @throws \InvalidArgumentException
     *
     * @return array{
     *     \Everest\Model\DatabaseCluster|\Everest\Model\Error|\Everest\Model\Error,
     *     int,
     *     list<string>,
     * } Array of response body, status, and response headers
     */
    public function getDatabaseClusterWithHttpInfo(
        mixed $namespace,
        mixed $name,
        string $contentType = self::contentTypes['getDatabaseCluster'][0],
    ): array {
        $request = $this->getDatabaseClusterRequest($namespace, $name, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Everest\Model\DatabaseCluster' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Everest\Model\DatabaseCluster' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Everest\Model\DatabaseCluster', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Everest\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Everest\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Everest\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Everest\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Everest\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Everest\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Everest\Model\DatabaseCluster';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Everest\Model\DatabaseCluster',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Everest\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Everest\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * getDatabaseClusterAsync: Get the specified database cluster
     *
     * @param  string $namespace Name of the namespace (required)
     * @param  string $name Name of the database cluster. Can be found under Metadata[\&quot;name\&quot;] of the DatabaseCluster object. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDatabaseCluster'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     */
    public function getDatabaseClusterAsync(
        mixed $namespace,
        mixed $name,
        string $contentType = self::contentTypes['getDatabaseCluster'][0],
    ): PromiseInterface {
        return $this->getDatabaseClusterAsyncWithHttpInfo($namespace, $name, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * getDatabaseClusterAsyncWithHttpInfo: Get the specified database cluster
     *
     * @param  string $namespace Name of the namespace (required)
     * @param  string $name Name of the database cluster. Can be found under Metadata[\&quot;name\&quot;] of the DatabaseCluster object. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDatabaseCluster'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     */
    public function getDatabaseClusterAsyncWithHttpInfo(
        mixed $namespace,
        mixed $name,
        string $contentType = self::contentTypes['getDatabaseCluster'][0],
    ): PromiseInterface {
        $returnType = '\Everest\Model\DatabaseCluster';
        $request = $this->getDatabaseClusterRequest($namespace, $name, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDatabaseCluster'
     *
     * @param  string $namespace Name of the namespace (required)
     * @param  string $name Name of the database cluster. Can be found under Metadata[\&quot;name\&quot;] of the DatabaseCluster object. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDatabaseCluster'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     */
    public function getDatabaseClusterRequest(
        mixed $namespace,
        mixed $name,
        string $contentType = self::contentTypes['getDatabaseCluster'][0],
    ): Request {
        // verify the required parameter 'namespace' is set
        if ($namespace === null || (is_array($namespace) && count($namespace) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $namespace when calling getDatabaseCluster'
            );
        }

        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling getDatabaseCluster'
            );
        }

        $resourcePath = '/namespaces/{namespace}/database-clusters/{name}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if ($namespace !== null) {
            $resourcePath = str_replace(
                '{' . 'namespace' . '}',
                ObjectSerializer::toPathValue($namespace),
                $resourcePath
            );
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * getDatabaseClusterCredentials: Get the specified database cluster credentials
     *
     * @param  string $namespace Name of the namespace (required)
     * @param  string $name Name of the database cluster. Can be found under Metadata[\&quot;name\&quot;] of the DatabaseCluster object. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDatabaseClusterCredentials'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws GuzzleException
     * @throws \InvalidArgumentException
     *
     * @return \Everest\Model\DatabaseClusterCredential|\Everest\Model\Error|\Everest\Model\Error
     */
    public function getDatabaseClusterCredentials(
        mixed $namespace,
        mixed $name,
        string $contentType = self::contentTypes['getDatabaseClusterCredentials'][0],
    ): mixed {
        list($response) = $this->getDatabaseClusterCredentialsWithHttpInfo($namespace, $name, $contentType);

        return $response;
    }

    /**
     * getDatabaseClusterCredentialsWithHttpInfo: Get the specified database cluster credentials
     *
     * @param  string $namespace Name of the namespace (required)
     * @param  string $name Name of the database cluster. Can be found under Metadata[\&quot;name\&quot;] of the DatabaseCluster object. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDatabaseClusterCredentials'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws GuzzleException
     * @throws \InvalidArgumentException
     *
     * @return array{
     *     \Everest\Model\DatabaseClusterCredential|\Everest\Model\Error|\Everest\Model\Error,
     *     int,
     *     list<string>,
     * } Array of response body, status, and response headers
     */
    public function getDatabaseClusterCredentialsWithHttpInfo(
        mixed $namespace,
        mixed $name,
        string $contentType = self::contentTypes['getDatabaseClusterCredentials'][0],
    ): array {
        $request = $this->getDatabaseClusterCredentialsRequest($namespace, $name, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Everest\Model\DatabaseClusterCredential' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Everest\Model\DatabaseClusterCredential' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Everest\Model\DatabaseClusterCredential', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Everest\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Everest\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Everest\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Everest\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Everest\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Everest\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Everest\Model\DatabaseClusterCredential';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Everest\Model\DatabaseClusterCredential',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Everest\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Everest\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * getDatabaseClusterCredentialsAsync: Get the specified database cluster credentials
     *
     * @param  string $namespace Name of the namespace (required)
     * @param  string $name Name of the database cluster. Can be found under Metadata[\&quot;name\&quot;] of the DatabaseCluster object. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDatabaseClusterCredentials'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     */
    public function getDatabaseClusterCredentialsAsync(
        mixed $namespace,
        mixed $name,
        string $contentType = self::contentTypes['getDatabaseClusterCredentials'][0],
    ): PromiseInterface {
        return $this->getDatabaseClusterCredentialsAsyncWithHttpInfo($namespace, $name, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * getDatabaseClusterCredentialsAsyncWithHttpInfo: Get the specified database cluster credentials
     *
     * @param  string $namespace Name of the namespace (required)
     * @param  string $name Name of the database cluster. Can be found under Metadata[\&quot;name\&quot;] of the DatabaseCluster object. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDatabaseClusterCredentials'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     */
    public function getDatabaseClusterCredentialsAsyncWithHttpInfo(
        mixed $namespace,
        mixed $name,
        string $contentType = self::contentTypes['getDatabaseClusterCredentials'][0],
    ): PromiseInterface {
        $returnType = '\Everest\Model\DatabaseClusterCredential';
        $request = $this->getDatabaseClusterCredentialsRequest($namespace, $name, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDatabaseClusterCredentials'
     *
     * @param  string $namespace Name of the namespace (required)
     * @param  string $name Name of the database cluster. Can be found under Metadata[\&quot;name\&quot;] of the DatabaseCluster object. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDatabaseClusterCredentials'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     */
    public function getDatabaseClusterCredentialsRequest(
        mixed $namespace,
        mixed $name,
        string $contentType = self::contentTypes['getDatabaseClusterCredentials'][0],
    ): Request {
        // verify the required parameter 'namespace' is set
        if ($namespace === null || (is_array($namespace) && count($namespace) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $namespace when calling getDatabaseClusterCredentials'
            );
        }

        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling getDatabaseClusterCredentials'
            );
        }

        $resourcePath = '/namespaces/{namespace}/database-clusters/{name}/credentials';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if ($namespace !== null) {
            $resourcePath = str_replace(
                '{' . 'namespace' . '}',
                ObjectSerializer::toPathValue($namespace),
                $resourcePath
            );
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * getDatabaseClusterPitr: Get the Point-in-Time related data for the specified database cluster
     *
     * @param  string $namespace Name of the namespace (required)
     * @param  string $name Name of the database cluster. Can be found under Metadata[\&quot;name\&quot;] of the DatabaseCluster object. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDatabaseClusterPitr'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws GuzzleException
     * @throws \InvalidArgumentException
     *
     * @return \Everest\Model\DatabaseClusterPitr|\Everest\Model\Error|\Everest\Model\Error
     */
    public function getDatabaseClusterPitr(
        mixed $namespace,
        mixed $name,
        string $contentType = self::contentTypes['getDatabaseClusterPitr'][0],
    ): mixed {
        list($response) = $this->getDatabaseClusterPitrWithHttpInfo($namespace, $name, $contentType);

        return $response;
    }

    /**
     * getDatabaseClusterPitrWithHttpInfo: Get the Point-in-Time related data for the specified database cluster
     *
     * @param  string $namespace Name of the namespace (required)
     * @param  string $name Name of the database cluster. Can be found under Metadata[\&quot;name\&quot;] of the DatabaseCluster object. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDatabaseClusterPitr'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws GuzzleException
     * @throws \InvalidArgumentException
     *
     * @return array{
     *     \Everest\Model\DatabaseClusterPitr|\Everest\Model\Error|\Everest\Model\Error,
     *     int,
     *     list<string>,
     * } Array of response body, status, and response headers
     */
    public function getDatabaseClusterPitrWithHttpInfo(
        mixed $namespace,
        mixed $name,
        string $contentType = self::contentTypes['getDatabaseClusterPitr'][0],
    ): array {
        $request = $this->getDatabaseClusterPitrRequest($namespace, $name, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Everest\Model\DatabaseClusterPitr' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Everest\Model\DatabaseClusterPitr' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Everest\Model\DatabaseClusterPitr', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Everest\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Everest\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Everest\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Everest\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Everest\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Everest\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Everest\Model\DatabaseClusterPitr';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Everest\Model\DatabaseClusterPitr',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Everest\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Everest\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * getDatabaseClusterPitrAsync: Get the Point-in-Time related data for the specified database cluster
     *
     * @param  string $namespace Name of the namespace (required)
     * @param  string $name Name of the database cluster. Can be found under Metadata[\&quot;name\&quot;] of the DatabaseCluster object. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDatabaseClusterPitr'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     */
    public function getDatabaseClusterPitrAsync(
        mixed $namespace,
        mixed $name,
        string $contentType = self::contentTypes['getDatabaseClusterPitr'][0],
    ): PromiseInterface {
        return $this->getDatabaseClusterPitrAsyncWithHttpInfo($namespace, $name, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * getDatabaseClusterPitrAsyncWithHttpInfo: Get the Point-in-Time related data for the specified database cluster
     *
     * @param  string $namespace Name of the namespace (required)
     * @param  string $name Name of the database cluster. Can be found under Metadata[\&quot;name\&quot;] of the DatabaseCluster object. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDatabaseClusterPitr'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     */
    public function getDatabaseClusterPitrAsyncWithHttpInfo(
        mixed $namespace,
        mixed $name,
        string $contentType = self::contentTypes['getDatabaseClusterPitr'][0],
    ): PromiseInterface {
        $returnType = '\Everest\Model\DatabaseClusterPitr';
        $request = $this->getDatabaseClusterPitrRequest($namespace, $name, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDatabaseClusterPitr'
     *
     * @param  string $namespace Name of the namespace (required)
     * @param  string $name Name of the database cluster. Can be found under Metadata[\&quot;name\&quot;] of the DatabaseCluster object. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDatabaseClusterPitr'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     */
    public function getDatabaseClusterPitrRequest(
        mixed $namespace,
        mixed $name,
        string $contentType = self::contentTypes['getDatabaseClusterPitr'][0],
    ): Request {
        // verify the required parameter 'namespace' is set
        if ($namespace === null || (is_array($namespace) && count($namespace) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $namespace when calling getDatabaseClusterPitr'
            );
        }

        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling getDatabaseClusterPitr'
            );
        }

        $resourcePath = '/namespaces/{namespace}/database-clusters/{name}/pitr';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if ($namespace !== null) {
            $resourcePath = str_replace(
                '{' . 'namespace' . '}',
                ObjectSerializer::toPathValue($namespace),
                $resourcePath
            );
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * listDatabaseClusters: List of the created database clusters
     *
     * @param  string $namespace Name of the namespace (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listDatabaseClusters'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws GuzzleException
     * @throws \InvalidArgumentException
     *
     * @return \Everest\Model\DatabaseClusterList|\Everest\Model\Error|\Everest\Model\Error
     */
    public function listDatabaseClusters(
        mixed $namespace,
        string $contentType = self::contentTypes['listDatabaseClusters'][0],
    ): mixed {
        list($response) = $this->listDatabaseClustersWithHttpInfo($namespace, $contentType);

        return $response;
    }

    /**
     * listDatabaseClustersWithHttpInfo: List of the created database clusters
     *
     * @param  string $namespace Name of the namespace (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listDatabaseClusters'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws GuzzleException
     * @throws \InvalidArgumentException
     *
     * @return array{
     *     \Everest\Model\DatabaseClusterList|\Everest\Model\Error|\Everest\Model\Error,
     *     int,
     *     list<string>,
     * } Array of response body, status, and response headers
     */
    public function listDatabaseClustersWithHttpInfo(
        mixed $namespace,
        string $contentType = self::contentTypes['listDatabaseClusters'][0],
    ): array {
        $request = $this->listDatabaseClustersRequest($namespace, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Everest\Model\DatabaseClusterList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Everest\Model\DatabaseClusterList' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Everest\Model\DatabaseClusterList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Everest\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Everest\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Everest\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Everest\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Everest\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Everest\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Everest\Model\DatabaseClusterList';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Everest\Model\DatabaseClusterList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Everest\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Everest\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * listDatabaseClustersAsync: List of the created database clusters
     *
     * @param  string $namespace Name of the namespace (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listDatabaseClusters'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     */
    public function listDatabaseClustersAsync(
        mixed $namespace,
        string $contentType = self::contentTypes['listDatabaseClusters'][0],
    ): PromiseInterface {
        return $this->listDatabaseClustersAsyncWithHttpInfo($namespace, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * listDatabaseClustersAsyncWithHttpInfo: List of the created database clusters
     *
     * @param  string $namespace Name of the namespace (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listDatabaseClusters'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     */
    public function listDatabaseClustersAsyncWithHttpInfo(
        mixed $namespace,
        string $contentType = self::contentTypes['listDatabaseClusters'][0],
    ): PromiseInterface {
        $returnType = '\Everest\Model\DatabaseClusterList';
        $request = $this->listDatabaseClustersRequest($namespace, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listDatabaseClusters'
     *
     * @param  string $namespace Name of the namespace (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listDatabaseClusters'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     */
    public function listDatabaseClustersRequest(
        mixed $namespace,
        string $contentType = self::contentTypes['listDatabaseClusters'][0],
    ): Request {
        // verify the required parameter 'namespace' is set
        if ($namespace === null || (is_array($namespace) && count($namespace) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $namespace when calling listDatabaseClusters'
            );
        }

        $resourcePath = '/namespaces/{namespace}/database-clusters';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if ($namespace !== null) {
            $resourcePath = str_replace(
                '{' . 'namespace' . '}',
                ObjectSerializer::toPathValue($namespace),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * updateDatabaseCluster: Replace the specified database cluster
     *
     * @param  string $namespace Name of the namespace (required)
     * @param  string $name Name of the database cluster. Can be found under Metadata[\&quot;name\&quot;] of the DatabaseCluster object. (required)
     * @param  \Everest\Model\DatabaseCluster $databaseCluster The database cluster object to be updated (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateDatabaseCluster'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws GuzzleException
     * @throws \InvalidArgumentException
     *
     * @return \Everest\Model\DatabaseCluster|\Everest\Model\Error|\Everest\Model\Error
     */
    public function updateDatabaseCluster(
        mixed $namespace,
        mixed $name,
        mixed $databaseCluster,
        string $contentType = self::contentTypes['updateDatabaseCluster'][0],
    ): mixed {
        list($response) = $this->updateDatabaseClusterWithHttpInfo($namespace, $name, $databaseCluster, $contentType);

        return $response;
    }

    /**
     * updateDatabaseClusterWithHttpInfo: Replace the specified database cluster
     *
     * @param  string $namespace Name of the namespace (required)
     * @param  string $name Name of the database cluster. Can be found under Metadata[\&quot;name\&quot;] of the DatabaseCluster object. (required)
     * @param  \Everest\Model\DatabaseCluster $databaseCluster The database cluster object to be updated (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateDatabaseCluster'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws GuzzleException
     * @throws \InvalidArgumentException
     *
     * @return array{
     *     \Everest\Model\DatabaseCluster|\Everest\Model\Error|\Everest\Model\Error,
     *     int,
     *     list<string>,
     * } Array of response body, status, and response headers
     */
    public function updateDatabaseClusterWithHttpInfo(
        mixed $namespace,
        mixed $name,
        mixed $databaseCluster,
        string $contentType = self::contentTypes['updateDatabaseCluster'][0],
    ): array {
        $request = $this->updateDatabaseClusterRequest($namespace, $name, $databaseCluster, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Everest\Model\DatabaseCluster' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Everest\Model\DatabaseCluster' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Everest\Model\DatabaseCluster', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Everest\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Everest\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Everest\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Everest\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Everest\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Everest\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Everest\Model\DatabaseCluster';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Everest\Model\DatabaseCluster',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Everest\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Everest\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * updateDatabaseClusterAsync: Replace the specified database cluster
     *
     * @param  string $namespace Name of the namespace (required)
     * @param  string $name Name of the database cluster. Can be found under Metadata[\&quot;name\&quot;] of the DatabaseCluster object. (required)
     * @param  \Everest\Model\DatabaseCluster $databaseCluster The database cluster object to be updated (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateDatabaseCluster'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     */
    public function updateDatabaseClusterAsync(
        mixed $namespace,
        mixed $name,
        mixed $databaseCluster,
        string $contentType = self::contentTypes['updateDatabaseCluster'][0],
    ): PromiseInterface {
        return $this->updateDatabaseClusterAsyncWithHttpInfo($namespace, $name, $databaseCluster, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * updateDatabaseClusterAsyncWithHttpInfo: Replace the specified database cluster
     *
     * @param  string $namespace Name of the namespace (required)
     * @param  string $name Name of the database cluster. Can be found under Metadata[\&quot;name\&quot;] of the DatabaseCluster object. (required)
     * @param  \Everest\Model\DatabaseCluster $databaseCluster The database cluster object to be updated (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateDatabaseCluster'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     */
    public function updateDatabaseClusterAsyncWithHttpInfo(
        mixed $namespace,
        mixed $name,
        mixed $databaseCluster,
        string $contentType = self::contentTypes['updateDatabaseCluster'][0],
    ): PromiseInterface {
        $returnType = '\Everest\Model\DatabaseCluster';
        $request = $this->updateDatabaseClusterRequest($namespace, $name, $databaseCluster, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateDatabaseCluster'
     *
     * @param  string $namespace Name of the namespace (required)
     * @param  string $name Name of the database cluster. Can be found under Metadata[\&quot;name\&quot;] of the DatabaseCluster object. (required)
     * @param  \Everest\Model\DatabaseCluster $databaseCluster The database cluster object to be updated (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateDatabaseCluster'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     */
    public function updateDatabaseClusterRequest(
        mixed $namespace,
        mixed $name,
        mixed $databaseCluster,
        string $contentType = self::contentTypes['updateDatabaseCluster'][0],
    ): Request {
        // verify the required parameter 'namespace' is set
        if ($namespace === null || (is_array($namespace) && count($namespace) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $namespace when calling updateDatabaseCluster'
            );
        }

        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling updateDatabaseCluster'
            );
        }

        // verify the required parameter 'databaseCluster' is set
        if ($databaseCluster === null || (is_array($databaseCluster) && count($databaseCluster) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $databaseCluster when calling updateDatabaseCluster'
            );
        }

        $resourcePath = '/namespaces/{namespace}/database-clusters/{name}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if ($namespace !== null) {
            $resourcePath = str_replace(
                '{' . 'namespace' . '}',
                ObjectSerializer::toPathValue($namespace),
                $resourcePath
            );
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($databaseCluster)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($databaseCluster));
            } else {
                $httpBody = $databaseCluster;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     *
     * @return array of http client options
     */
    protected function createHttpClientOption(): array
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
